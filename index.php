<?php
require 'vendor/autoload.php';

\Slim\Route::setDefaultConditions(array(
    'name' => '[a-z]{3,}'
));
$app = new \Slim\Slim(array('templates.path' => '.'));

/* Helper functions and internal code */

function listGenerators() {
    static $generators;
        if (!isset($generators)) {
            $generators = array();
            $it = new FilesystemIterator(dirname(__FILE__) . "/generators");
            foreach ($it as $dir) {
                if ($it->isDir()) {
                    $name = (string)$it;
                if (file_exists(dirname(__FILE__) . "/generators/" . $name . "/info.json")) {
                    $info = json_decode(getGeneratorInfo($name));
                    if (empty($info->hidden)) {
                        $info->name = $name;
                        $generators[$name] = $info;
                    }
                }
            }
        }
    }
    return $generators;
}

function getGeneratorInfo($name) {
    $filename = dirname(__FILE__) . "/generators/" . $name . "/info.json";
    if (file_exists($filename)) {
      $json = file_get_contents($filename);
      return $json;
    }
    else {
      // error stuffs
    }
}

function invokeGenerator($name, $rule = '', $params = array()) {
    $dir = dirname(__FILE__) . "/generators/" . $name;
    $command = "rmutt main.rm";
    if (!empty($rule)) {
        $command .= " -e " . $rule;
    }
    foreach ($params as $key => $val) {
        $command .= " -b $key=$val";
    }
    $command = "cd $dir; " . escapeshellcmd($command);
    $output = shell_exec($command);
    return $output;
}


/* API handlers */

$app->group('/api', function() use ($app) {
  /* Returns a list of available generators. */
  $app->get('/', 'apiRequest', function() use($app) {
    $response = array();
    $generators = listGenerators();
    $app->render(200, array(
      'generators' => $generators,
    ));
  });

  /* Returns a list of available API endpoints and their parameters. */
  $app->options('/', 'apiRequest', function() use($app) {
    $response = array(
      'commands' => array(
        '/api' => 'Lists available generators',
        '/api/:name' => 'Returns text generated by the supplied generator name.',
        '/api/:name/grammar' => 'Returns the grammar definition file for the supplied generator name.',
      ),
    );
    $app->render(200, $response);
  });

  /* Returns actual output from a generator. */
  $app->get('/:name', 'apiRequest', function($name) use($app) {
    $time_start = microtime(true);
    $output = invokeGenerator($name);
    $time_end = microtime(true);
    $app->render(200, array(
      'output' => $output,
      'elapsed' => $time_end - $time_start
    ));
  })->conditions(\Slim\Route::getDefaultConditions());

  /* Returns the main grammar definition for a generator. */
  $app->get('/:name/grammar', 'apiRequest', function($name) use($app) {
    $filename = "generators/" . $name . "/main.rm";
    $definition = file_get_contents($filename);
    $app->render(200, array(
      'grammar' => $definition,
    ));
  })->conditions(\Slim\Route::getDefaultConditions());

});

/* Visitor-facing HTML pages */

$app->get('/', 'pageRequest', function() use($app){
    $params = array();
    $params['generators'] = listGenerators();

    $app->render("templates/home.html", $params);
});


$app->get('/:name', 'pageRequest', function($name) use($app){
    // Check for a custom template, fall back to the generic one.
    $info = getGeneratorInfo($name);
    if (empty($info)) {
      $app->notFound();
    }
    else {
      $params = json_decode($info, true);
      $params['output'] = invokeGenerator($name);
      $template = "templates/generator.html";
      
      $alt_dir = dirname(__FILE__) . "/generators/$name";
      if (file_exists($alt_dir . "/template.html")) {
        $template = "generators/$name/template.html";
      }
      
      $app->render($template, $params);
    }
})->conditions(\Slim\Route::getDefaultConditions());

function apiRequest() {
  $app = \Slim\Slim::getInstance();
  $app->view(new \JsonApiView());
  $app->add(new \JsonApiMiddleware());
}

function pageRequest() {
  $app = \Slim\Slim::getInstance();
  $view = new \Slim\Views\Twig();
  $app->view($view);
}

$app->run();
